// This file generated by `tools/apispec-rule-gen/main.go`. DO NOT EDIT

package apispec

import (
{{- if and (or (ne .Pattern "") (ne (len .Enum) 0)) (ne .Sensitive true) }}
	"fmt"
{{- end }}
{{- if ne .Pattern "" }}
	"regexp"
{{- end }}

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
	"github.com/terraform-linters/tflint-ruleset-azurerm/project"
)

// {{ .RuleNameCC }}Rule checks the pattern is valid
type {{ .RuleNameCC }}Rule struct {
	resourceType  string
	attributeName string
{{- if ne .Max 0 }}
	max           int
{{- end }}
{{- if ne .Min 0 }}
	min           int
{{- end }}
{{- if ne .Pattern "" }}
	pattern       *regexp.Regexp
{{- end }}
{{- if ne (len .Enum) 0 }}
	enum          []string
{{- end }}
}

// New{{ .RuleNameCC }}Rule returns new rule with default attributes
func New{{ .RuleNameCC }}Rule() *{{ .RuleNameCC }}Rule {
	return &{{ .RuleNameCC }}Rule{
		resourceType:  "{{ .ResourceType }}",
		attributeName: "{{ .AttributeName }}",
{{- if ne .Max 0 }}
		max:           {{ .Max }},
{{- end }}
{{- if ne .Min 0 }}
		min:           {{ .Min }},
{{- end }}
{{- if ne .Pattern "" }}
		pattern:       regexp.MustCompile(`{{ .Pattern }}`),
{{- end }}
{{- if ne (len .Enum) 0 }}
		enum: []string{
{{- range $v := .Enum }}
			"{{ $v }}",
{{- end }}
		},
{{- end }}
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}Rule) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}Rule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *{{ .RuleNameCC }}Rule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *{{ .RuleNameCC }}Rule) Link() string {
	return project.ReferenceLink(r.Name())
}

// Check checks the pattern is valid
func (r *{{ .RuleNameCC }}Rule) Check(runner tflint.Runner) error {
	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
{{- if (or (ne .Max 0) (ne .Min 0)) }}
		var val int
{{- else }}
		var val string
{{- end }}
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
{{- if ne .Max 0 }}
			if val > r.max {
				runner.EmitIssue(
					r,
					"{{ .AttributeName }} must be {{ .Max }} or less",
					attribute.Expr.Range(),
					tflint.Metadata{Expr: attribute.Expr},
				)
			}
{{- end }}

{{- if ne .Min 0 }}
			if val < r.min {
				runner.EmitIssue(
					r,
					"{{ .AttributeName }} must be {{ .Min }} or higher",
					attribute.Expr.Range(),
					tflint.Metadata{Expr: attribute.Expr},
				)
			}
{{- end }}

{{- if ne .Pattern "" }}
			if !r.pattern.MatchString(val) {
				runner.EmitIssue(
					r,
{{- if .Sensitive }}
					`{{ .AttributeName }} does not match valid pattern {{ .Pattern }}`,
{{- else }}
					fmt.Sprintf(`"%s" does not match valid pattern %s`, truncateLongMessage(val), `{{ .Pattern }}`),
{{- end }}
					attribute.Expr.Range(),
					tflint.Metadata{Expr: attribute.Expr},
				)
			}
{{- end }}

{{- if ne (len .Enum) 0 }}
			found := false
			for _, item := range r.enum {
				if item == val {
					found = true
				}
			}
			if !found {
				runner.EmitIssue(
					r,
{{- if .Sensitive }}
					`{{ .AttributeName }} is an invalid value`,
{{- else }}
					fmt.Sprintf(`"%s" is an invalid value as {{ .AttributeName }}`, truncateLongMessage(val)),
{{- end }}
					attribute.Expr.Range(),
					tflint.Metadata{Expr: attribute.Expr},
				)
			}
{{- end }}
			return nil
		})
	})
}
