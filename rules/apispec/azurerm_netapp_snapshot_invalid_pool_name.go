// This file generated by `tools/apispec-rule-gen/main.go`. DO NOT EDIT

package apispec

import (
	"fmt"
	"regexp"

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
)

// AzurermNetappSnapshotInvalidPoolNameRule checks the pattern is valid
type AzurermNetappSnapshotInvalidPoolNameRule struct {
	resourceType  string
	attributeName string
	pattern       *regexp.Regexp
}

// NewAzurermNetappSnapshotInvalidPoolNameRule returns new rule with default attributes
func NewAzurermNetappSnapshotInvalidPoolNameRule() *AzurermNetappSnapshotInvalidPoolNameRule {
	return &AzurermNetappSnapshotInvalidPoolNameRule{
		resourceType:  "azurerm_netapp_snapshot",
		attributeName: "pool_name",
		pattern:       regexp.MustCompile(`^[a-zA-Z0-9][a-zA-Z0-9\-_]{0,63}$`),
	}
}

// Name returns the rule name
func (r *AzurermNetappSnapshotInvalidPoolNameRule) Name() string {
	return "azurerm_netapp_snapshot_invalid_pool_name"
}

// Enabled returns whether the rule is enabled by default
func (r *AzurermNetappSnapshotInvalidPoolNameRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AzurermNetappSnapshotInvalidPoolNameRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AzurermNetappSnapshotInvalidPoolNameRule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *AzurermNetappSnapshotInvalidPoolNameRule) Check(runner tflint.Runner) error {
	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
			if !r.pattern.MatchString(val) {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`"%s" does not match valid pattern %s`, truncateLongMessage(val), `^[a-zA-Z0-9][a-zA-Z0-9\-_]{0,63}$`),
					attribute.Expr.Range(),
					tflint.Metadata{Expr: attribute.Expr},
				)
			}
			return nil
		})
	})
}
